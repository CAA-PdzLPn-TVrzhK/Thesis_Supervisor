name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        language: [js, python]
    steps:
      - uses: actions/checkout@v3

      # JS Lint
      - if: matrix.language == 'js'
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - if: matrix.language == 'js'
        run: npm ci
      - if: matrix.language == 'js'
        run: npm run lint:ci

      # Python Lint
      - if: matrix.language == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - if: matrix.language == 'python'
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 mypy
          black --check .
          isort --check-only .
          flake8 app/
          mypy app/
      - uses: actions/upload-artifact@v3
        if: matrix.language == 'js'
        with:
          name: eslint-report
          path: eslint-report.xml
      - uses: actions/upload-artifact@v3
        if: matrix.language == 'python'
        with:
          name: python-lint-report
          path: '**/flake8-report.xml'  # если нужен XML; иначе убрать

  build:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3

      # Build Python wheel
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - run: |
          pip install --upgrade build
          python -m build --wheel --outdir dist/
      - uses: actions/upload-artifact@v3
        with:
          name: python-dist
          path: dist/*.whl

      # Build frontend
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
      - run: npm ci
      - run: npm run build
      - uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: build/

  test:
    runs-on: ubuntu-latest
    needs: build
    services:
      sqlite:
        image: nouchka/sqlite3
    steps:
      - uses: actions/checkout@v3

      # Python tests
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - run: |
          pip install -r requirements.txt pytest pytest-cov
          pytest --junitxml=pytest-report.xml --cov=app --cov-report=xml
      - uses: actions/upload-artifact@v3
        with:
          name: pytest-report
          path: pytest-report.xml
      - uses: codecov/codecov-action@v3

      # JS tests
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
      - run: |
          npm ci
          npm test
      - uses: actions/upload-artifact@v3
        with:
          name: jest-coverage
          path: coverage/lcov.info

  security_scan:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - run: |
          pip install bandit
          bandit -r app/ -f xml -o bandit-report.xml
      - uses: actions/upload-artifact@v3
        with:
          name: bandit-report
          path: bandit-report.xml
