# verification.py

from telegram import Update
from telegram.ext import (
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackContext,
)
import random, smtplib
from email.mime.text import MIMEText
import os

# ----- —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ -----
ASK_EMAIL, ASK_CODE = range(2)

# –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: chat_id ‚Üí { email, code }
pending = {}


def start_verify(update: Update, ctx: CallbackContext) -> int:
    update.message.reply_text("üè∑ –í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π e-mail –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
    return ASK_EMAIL


def receive_email(update: Update, ctx: CallbackContext) -> int:
    email = update.message.text.strip()
    code = str(random.randint(100000, 999999))
    chat_id = update.effective_chat.id
    pending[chat_id] = {"email": email, "code": code}

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏ —à–ª—ë–º –ø–∏—Å—å–º–æ —á–µ—Ä–µ–∑ Gmail SMTP
    msg = MIMEText(f"–¢–≤–æ–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {code}")
    msg["Subject"] = "–ö–æ–¥ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"
    msg["From"] = os.getenv("GMAIL_USER")
    msg["To"] = email

    try:
        server = smtplib.SMTP("smtp.gmail.com", 587)
        server.starttls()
        server.login(os.getenv("GMAIL_USER"), os.getenv("GMAIL_APP_PASS"))
        server.send_message(msg)
    except Exception as e:
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
    finally:
        server.quit()

    update.message.reply_text("‚úâ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å –ø–æ—á—Ç—É –∏ –ø—Ä–∏—à–ª–∏ –µ–≥–æ —Å—é–¥–∞:")
    return ASK_CODE


def receive_code(update: Update, ctx: CallbackContext) -> int:
    chat_id = update.effective_chat.id
    user_code = update.message.text.strip()
    data = pending.get(chat_id)

    if data and user_code == data["code"]:
        update.message.reply_text("‚úÖ –û—Ç–ª–∏—á–Ω–æ, –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞!")
        # –ø–æ–º–µ—Ç—å –≤ –ë–î –∏–ª–∏ –ø–∞–º—è—Ç–∏, —á—Ç–æ user –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
        pending.pop(chat_id, None)
    else:
        update.message.reply_text("‚ùå –ö–æ–¥ –Ω–µ –ø–æ–¥–æ—à—ë–ª. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ /cancel")
    return ConversationHandler.END


def cancel(update: Update, ctx: CallbackContext) -> int:
    pending.pop(update.effective_chat.id, None)
    update.message.reply_text("–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –æ—Ç–º–µ–Ω–∏–ª–∏.")
    return ConversationHandler.END


# —Å–∞–º ConversationHandler, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –¥–∏—Å–ø–∞—Ç—á–µ—Ä
verify_conv = ConversationHandler(
    entry_points=[CommandHandler("verify", start_verify)],
    states={
        ASK_EMAIL: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, receive_email)
        ],  # –§–∏–ª—å—Ç—Ä—ã –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
        ASK_CODE: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, receive_code)
        ],  # –§–∏–ª—å—Ç—Ä—ã –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
    },
    fallbacks=[CommandHandler("cancel", cancel)],
    allow_reentry=False,
)
